for (fpr in c(0.005, 0.01)){
fpr + 1
}
for (fpr in c(0.005, 0.01)){
print(fpr+1)
}
seq(0,0.1,0.001)
seq(0,0.01,0.001)
for (fpr in seq(0,0.01,0.001)){
println(fpr)
}
for (fpr in seq(0,0.01,0.001)){
print(fpr)
}
#======================================================================
# Load packages
#======================================================================
library(dplyr)
library(bigsnpr)
library(ggmix)
library(data.table)
getwd()
setwd("../data")
#=======================================================================
# Load the phenotype data
#=======================================================================
#Read phenotype and covariates file
pheno.cov <- read.table("covariate.txt", sep=",", header = T) %>%
mutate(ID=paste(FID,":",IID,sep=""))
trainrowinds = which(pheno.cov$train == "true")
trainrowinds
n <- length(trainrowinds)
n
#=======================================================================
# Load the genotype data
#=======================================================================
tmpfile <- tempfile()
snp_readBed("geno.bed",backingfile = tmpfile)
# Attach the "bigSNP" object in R session
obj.bigSNP <- snp_attach(paste0(tmpfile, ".rds"))
p <- nrow(obj.bigSNP$map)
G <- bigsnpr::snp_fastImputeSimple(obj.bigSNP$genotypes)[,1:p]
# Standardize genotype matrix
s <- apply(G, 2, sd)
G <- scale(G)
Gtrain <- G[trainrowinds,]
#Read GRM matrix
GRM <- as.matrix(fread("grm.txt.gz"))
colnames(GRM) <- pheno.cov$ID
rownames(GRM) <- pheno.cov$ID
#=======================================================================
# GGMIX
#=======================================================================
Xtrain <- pheno.cov[trainrowinds, c("AGE","SEX")]
ytrain <- as.matrix(pheno.cov$y)[trainrowinds]
fit_ggmix <- ggmix(x = as.matrix(cbind(Xtrain, Gtrain)),
y = ytrain,
standardize = TRUE,
kinship=GRM[trainrowinds, trainrowinds],
penalty.factor = c(rep(0,ncol(Xtrain)),rep(1,p))
)
# Find lambda that gives minimum GIC
aic <- ggmix::gic(fit_ggmix, an = 2)
bic <- ggmix::gic(fit_ggmix, an = log(n))
# Save betas for ggmix with different GIC criteria
ggmixAIC_beta <- 1/s * coef(aic)[setdiff(rownames(coef(aic)), c("(Intercept)","AGE","SEX","eta","sigma2")),]
ggmixBIC_beta <- 1/s * coef(bic)[setdiff(rownames(coef(bic)), c("(Intercept)","AGE","SEX","eta","sigma2")),]
# Read file with real values
true_betas = read.csv("betas.txt")$beta
ggmix_betas = 1/s * fit_ggmix$beta[-(1:ncol(Xtrain)),]
# Predict phenotype on test set
Xtest <- pheno.cov[-trainrowinds, c("AGE","SEX")]
Gtest <- G[-trainrowinds,]
ggmixAIC_yhat <- predict(aic, as.matrix(cbind(Xtest, Gtest)), covariance = GRM[-trainrowinds, trainrowinds])
ggmixBIC_yhat <- predict(bic, as.matrix(cbind(Xtest, Gtest)), covariance = GRM[-trainrowinds, trainrowinds])
ggmixBIC_yhat
ggmixAIC_beta
cbind(ggmixAIC = ggmixAIC_beta, ggmixBIC = ggmixBIC_beta)
cbind(ggmixAIC = ggmixAIC_beta, ggmixBIC = ggmixBIC_beta)
ggmixBIC_beta
ggmixBIC_beta != 0
sum(ggmixBIC_beta != 0)
stats::prcomp
stats::prcomp()
stats::prcomp()
stats::prcomp
?stats::prcomp
