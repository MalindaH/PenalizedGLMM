for (fpr in c(0.005, 0.01)){
fpr + 1
}
for (fpr in c(0.005, 0.01)){
print(fpr+1)
}
seq(0,0.1,0.001)
seq(0,0.01,0.001)
for (fpr in seq(0,0.01,0.001)){
println(fpr)
}
for (fpr in seq(0,0.01,0.001)){
print(fpr)
}
#======================================================================
# Load packages
#======================================================================
library(dplyr)
library(bigsnpr)
library(ggmix)
library(data.table)
getwd()
setwd("../data")
#=======================================================================
# Load the phenotype data
#=======================================================================
#Read phenotype and covariates file
pheno.cov <- read.table("covariate.txt", sep=",", header = T) %>%
mutate(ID=paste(FID,":",IID,sep=""))
trainrowinds = which(pheno.cov$train == "true")
trainrowinds
n <- length(trainrowinds)
n
#=======================================================================
# Load the genotype data
#=======================================================================
tmpfile <- tempfile()
snp_readBed("geno.bed",backingfile = tmpfile)
# Attach the "bigSNP" object in R session
obj.bigSNP <- snp_attach(paste0(tmpfile, ".rds"))
p <- nrow(obj.bigSNP$map)
G <- bigsnpr::snp_fastImputeSimple(obj.bigSNP$genotypes)[,1:p]
# Standardize genotype matrix
s <- apply(G, 2, sd)
G <- scale(G)
Gtrain <- G[trainrowinds,]
#Read GRM matrix
GRM <- as.matrix(fread("grm.txt.gz"))
colnames(GRM) <- pheno.cov$ID
rownames(GRM) <- pheno.cov$ID
#=======================================================================
# GGMIX
#=======================================================================
Xtrain <- pheno.cov[trainrowinds, c("AGE","SEX")]
ytrain <- as.matrix(pheno.cov$y)[trainrowinds]
fit_ggmix <- ggmix(x = as.matrix(cbind(Xtrain, Gtrain)),
y = ytrain,
standardize = TRUE,
kinship=GRM[trainrowinds, trainrowinds],
penalty.factor = c(rep(0,ncol(Xtrain)),rep(1,p))
)
# Find lambda that gives minimum GIC
aic <- ggmix::gic(fit_ggmix, an = 2)
bic <- ggmix::gic(fit_ggmix, an = log(n))
# Save betas for ggmix with different GIC criteria
ggmixAIC_beta <- 1/s * coef(aic)[setdiff(rownames(coef(aic)), c("(Intercept)","AGE","SEX","eta","sigma2")),]
ggmixBIC_beta <- 1/s * coef(bic)[setdiff(rownames(coef(bic)), c("(Intercept)","AGE","SEX","eta","sigma2")),]
# Read file with real values
true_betas = read.csv("betas.txt")$beta
ggmix_betas = 1/s * fit_ggmix$beta[-(1:ncol(Xtrain)),]
# Predict phenotype on test set
Xtest <- pheno.cov[-trainrowinds, c("AGE","SEX")]
Gtest <- G[-trainrowinds,]
ggmixAIC_yhat <- predict(aic, as.matrix(cbind(Xtest, Gtest)), covariance = GRM[-trainrowinds, trainrowinds])
ggmixBIC_yhat <- predict(bic, as.matrix(cbind(Xtest, Gtest)), covariance = GRM[-trainrowinds, trainrowinds])
ggmixBIC_yhat
ggmixAIC_beta
cbind(ggmixAIC = ggmixAIC_beta, ggmixBIC = ggmixBIC_beta)
cbind(ggmixAIC = ggmixAIC_beta, ggmixBIC = ggmixBIC_beta)
ggmixBIC_beta
ggmixBIC_beta != 0
sum(ggmixBIC_beta != 0)
stats::prcomp
stats::prcomp()
stats::prcomp()
stats::prcomp
?stats::prcomp
setwd()
getwd()
args = c("0.5", "0.2", "0", "0.1", "10000", "0.005", "10", "NONE", "")
# Fraction of variance due to fixed polygenic additive effect (logit scale)
h2_g <- as.numeric(args[1])
# Fraction of variance due to random polygenic additive effect (logit scale)
h2_b <- as.numeric(args[2])
# Fraction of variance due to unobserved shared environmental effect (logit scale)
h2_d <- as.numeric(args[3])
# Prevalence
pi0 <- as.numeric(args[4])
# Number of snps to randomly select accros genome
p_design <- as.numeric(args[5])
# Percentage of causal SNPs
percent_causal <- as.numeric(args[6])
# Number of populations
K <- as.numeric(args[7])
# Overlap between design and kinship SNPs
percent_overlap <- ifelse(args[8] == "ALL", "100", ifelse(args[8] == "NONE", "0"))
# Number of SNPs to use for kinship estimation
p_kinship <- 500
# Number of subjects to simulate
n <- 2500
# ------------------------------------------------------------------------
# Source R function to simulate genotypes
# ------------------------------------------------------------------------
#source(paste0(dirname(rstudioapi::getSourceEditorContext()$path), '/simtrait.R'))
source('simtrait.R')
admixed <- gen_structured_model(n = n,
p_design = p_design,
p_kinship = p_kinship,
geography = "1d",
percent_causal = percent_causal,
percent_overlap = percent_overlap,
k = K, s = 0.5, Fst = 0.1,
b0 = pi0, nPC = 10,
h2_g = h2_g, h2_b = h2_b,
train_tune_test = c(0.8, 0, 0.2)
)
# Genetic predictors
G <- array(dim = c(n, p_design))
colnames(G) <- colnames(admixed$xtrain_lasso[ , 1:p_design])
G[admixed$train_ind, ] <- admixed$xtrain_lasso[ ,1:p_design]
G[admixed$test_ind, ] <- admixed$xtest_lasso[ , 1:p_design]
# CSV file containing genetic predictors
write.csv(G, paste0(args[9], "snps.txt"), quote = FALSE, row.names = FALSE)
# ------------------------------------------------------------------------
# Source R function to simulate genotypes
# ------------------------------------------------------------------------
#source(paste0(dirname(rstudioapi::getSourceEditorContext()$path), '/simtrait.R'))
source('simtrait.R')
admixed <- gen_structured_model(n = n,
p_design = p_design,
p_kinship = p_kinship,
geography = "1d",
percent_causal = percent_causal,
percent_overlap = percent_overlap,
k = K, s = 0.5, Fst = 0.1,
b0 = pi0, nPC = 10,
h2_g = h2_g, h2_b = h2_b,
train_tune_test = c(0.8, 0, 0.2)
)
# Genetic predictors
G <- array(dim = c(n, p_design))
View(G)
colnames(G) <- colnames(admixed$xtrain_lasso[ , 1:p_design])
G[admixed$train_ind, ] <- admixed$xtrain_lasso[ ,1:p_design]
G[admixed$test_ind, ] <- admixed$xtest_lasso[ , 1:p_design]
# CSV file containing genetic predictors
write.csv(G, paste0(args[9], "snps.txt"), quote = FALSE, row.names = FALSE)
args = c("0.5", "0.2", "0", "0.1", "10000", "0.005", "10", "NONE", "")
# Fraction of variance due to random polygenic additive effect (logit scale)
h2_b <- as.numeric(args[2])
# Fraction of variance due to unobserved shared environmental effect (logit scale)
h2_d <- as.numeric(args[3])
# Prevalence
pi0 <- as.numeric(args[4])
# Number of snps to randomly select accros genome
p_design <- as.numeric(args[5])
# Percentage of causal SNPs
percent_causal <- as.numeric(args[6])
# Number of populations
K <- as.numeric(args[7])
# Overlap between design and kinship SNPs
percent_overlap <- ifelse(args[8] == "ALL", "100", ifelse(args[8] == "NONE", "0"))
# Number of SNPs to use for kinship estimation
p_kinship <- 50000
# Number of subjects to simulate
n <- 2500
p_kinship <- 500
# ------------------------------------------------------------------------
# Source R function to simulate genotypes
# ------------------------------------------------------------------------
#source(paste0(dirname(rstudioapi::getSourceEditorContext()$path), '/simtrait.R'))
source('simtrait.R')
admixed <- gen_structured_model(n = n,
p_design = p_design,
p_kinship = p_kinship,
geography = "1d",
percent_causal = percent_causal,
percent_overlap = percent_overlap,
k = K, s = 0.5, Fst = 0.1,
b0 = pi0, nPC = 10,
h2_g = h2_g, h2_b = h2_b,
train_tune_test = c(0.8, 0, 0.2)
)
# Fraction of variance due to fixed polygenic additive effect (logit scale)
h2_g <- as.numeric(args[1])
admixed <- gen_structured_model(n = n,
p_design = p_design,
p_kinship = p_kinship,
geography = "1d",
percent_causal = percent_causal,
percent_overlap = percent_overlap,
k = K, s = 0.5, Fst = 0.1,
b0 = pi0, nPC = 10,
h2_g = h2_g, h2_b = h2_b,
train_tune_test = c(0.8, 0, 0.2)
)
admixed$beta
admixed$beta
s
# CSV file containing beta for each SNP
beta = admixed$beta / admixed$s
plot(beta, admixed$beta)
std
sd
std
# Fraction of variance due to fixed polygenic additive effect (logit scale)
h2_g <- as.numeric(args[1])
args = c("0.5", "0.2", "0", "0.1", "10000", "0.005", "10", "NONE", "")
args = c("0.5", "0.2", "0", "0.1", "10000", "0.005", "10", "NONE", "")
# Fraction of variance due to fixed polygenic additive effect (logit scale)
h2_g <- as.numeric(args[1])
# Fraction of variance due to random polygenic additive effect (logit scale)
h2_b <- as.numeric(args[2])
# Prevalence
pi0 <- as.numeric(args[4])
# Number of snps to randomly select accros genome
p_design <- as.numeric(args[5])
# Percentage of causal SNPs
percent_causal <- as.numeric(args[6])
# Fraction of variance due to unobserved shared environmental effect (logit scale)
h2_d <- as.numeric(args[3])
# Prevalence
pi0 <- as.numeric(args[4])
# Number of snps to randomly select accros genome
p_design <- as.numeric(args[5])
# Percentage of causal SNPs
percent_causal <- as.numeric(args[6])
# Number of populations
K <- as.numeric(args[7])
# Overlap between design and kinship SNPs
percent_overlap <- ifelse(args[8] == "ALL", "100", ifelse(args[8] == "NONE", "0"))
p_kinship <- 500
# Number of subjects to simulate
n <- 2500
K=100
# ------------------------------------------------------------------------
# Source R function to simulate genotypes
# ------------------------------------------------------------------------
#source(paste0(dirname(rstudioapi::getSourceEditorContext()$path), '/simtrait.R'))
source('simtrait.R')
admixed <- gen_structured_model(n = n,
p_design = p_design,
p_kinship = p_kinship,
geography = "1d",
percent_causal = percent_causal,
percent_overlap = percent_overlap,
k = K, s = 0.5, Fst = 0.1,
b0 = pi0, nPC = 10,
h2_g = h2_g, h2_b = h2_b,
train_tune_test = c(0.8, 0, 0.2)
)
k = 50
K = 50
admixed <- gen_structured_model(n = n,
p_design = p_design,
p_kinship = p_kinship,
geography = "1d",
percent_causal = percent_causal,
percent_overlap = percent_overlap,
k = K, s = 0.5, Fst = 0.1,
b0 = pi0, nPC = 10,
h2_g = h2_g, h2_b = h2_b,
train_tune_test = c(0.8, 0, 0.2)
)
K = 25
admixed <- gen_structured_model(n = n,
p_design = p_design,
p_kinship = p_kinship,
geography = "1d",
percent_causal = percent_causal,
percent_overlap = percent_overlap,
k = K, s = 0.5, Fst = 0.1,
b0 = pi0, nPC = 10,
h2_g = h2_g, h2_b = h2_b,
train_tune_test = c(0.8, 0, 0.2)
)
K = 11
admixed <- gen_structured_model(n = n,
p_design = p_design,
p_kinship = p_kinship,
geography = "1d",
percent_causal = percent_causal,
percent_overlap = percent_overlap,
k = K, s = 0.5, Fst = 0.1,
b0 = pi0, nPC = 10,
h2_g = h2_g, h2_b = h2_b,
train_tune_test = c(0.8, 0, 0.2)
)
K = 20
admixed <- gen_structured_model(n = n,
p_design = p_design,
p_kinship = p_kinship,
geography = "1d",
percent_causal = percent_causal,
percent_overlap = percent_overlap,
k = K, s = 0.5, Fst = 0.1,
b0 = pi0, nPC = 10,
h2_g = h2_g, h2_b = h2_b,
train_tune_test = c(0.8, 0, 0.2)
)
K = 100
admixed <- gen_structured_model(n = n,
p_design = p_design,
p_kinship = p_kinship,
geography = "1d",
percent_causal = percent_causal,
percent_overlap = percent_overlap,
k = K, s = 0.5, Fst = 1/K,
b0 = pi0, nPC = 10,
h2_g = h2_g, h2_b = h2_b,
train_tune_test = c(0.8, 0, 0.2)
)
ls(admixed)
admixed$xtrain_lasso
admixed$xtrain_lasso[,paste0("PC", 1:10)]
plot(admixed$xtrain_lasso[,paste0("PC", 1)], admixed$xtrain_lasso[,paste0("PC", 2)])
ls(admixed)
plot(admixed$xtrain_lasso[,paste0("PC", 1)], admixed$xtrain_lasso[,paste0("PC", 2)], col = admixed$coancestry)
admixed$coancestry
str(admixed$coancestry)
str(admixed$subpops)
plot(admixed$xtrain_lasso[,paste0("PC", 1)], admixed$xtrain_lasso[,paste0("PC", 2)], col = admixed$subpops[trainrowinds])
plot(admixed$xtrain_lasso[,paste0("PC", 1)], admixed$xtrain_lasso[,paste0("PC", 2)], col = admixed$subpops[admixed$trainrowinds])
library(ggplot)
library(ggplot2)
admixed$PC
str(admixed$PC)
ggplot(admixed, aes(PC1, PC2, col = subpops)) + geom_point(size = 3) +
xlab("PC1") + ylab("PC2")
admixed
data.frame(admixed$PC)
data.frame(admixed$PC, admixed$subpops)
ggplot(data.frame(admixed$PC, admixed$subpops), aes(PC1, PC2, col = subpops)) + geom_point(size = 3) +
xlab("PC1") + ylab("PC2")
data.frame(admixed$PC, admixed$subpops)
ggplot(data.frame(admixed$PC, admixed$subpops), aes(PC1, PC2, col = subpops)) + geom_point(size = 3) +
xlab("PC1") + ylab("PC2")
head(data.frame(admixed$PC, admixed$subpops))
ggplot(data.frame(admixed$PC, pop = admixed$subpops), aes(PC1, PC2, col = pop)) + geom_point(size = 3) +
xlab("PC1") + ylab("PC2")
ggplot(data.frame(admixed$PC, pop = as.character(admixed$subpops)), aes(PC1, PC2, col = pop)) + geom_point(size = 3) +
xlab("PC1") + ylab("PC2")
ggplot(data.frame(admixed$PC, pop = as.character(admixed$subpops)), aes(PC1, PC2, col = pop)) +
geom_point(size = 3, show.legend = FALSE) +
xlab("PC1") + ylab("PC2")
