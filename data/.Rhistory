#======================================================================
# Load packages
#======================================================================
library(dplyr)
library(bigsnpr)
library(ggmix)
library(data.table)
#=======================================================================
# Load the phenotype data
#=======================================================================
#Read phenotype and covariates file
pheno.cov <- read.table("covariate.txt", sep=",", header = T)
trainrowinds <- which(pheno.cov$train %in% c(TRUE, "true"))
n <- length(trainrowinds)
trainrowinds <- which(pheno.cov$set %in% c("train"))
#=======================================================================
# Load the phenotype data
#=======================================================================
#Read phenotype and covariates file
pheno.cov <- read.table("covariate.txt", sep=",", header = T)
getwd()
setwd("../data")
#=======================================================================
# Load the phenotype data
#=======================================================================
#Read phenotype and covariates file
pheno.cov <- read.table("covariate.txt", sep=",", header = T)
trainrowinds <- which(pheno.cov$set %in% c("train"))
trainrowinds
trainrowinds <- which(pheno.cov$set %in% c("train"))
tunerowinds <- which(pheno.cov$set %in% c("tune"))
testrowinds <- which(pheno.cov$set %in% c("test"))
n <- length(trainrowinds)
n
trainrowinds <- which(pheno.cov$set %in% c("train"))
tunerowinds <- which(pheno.cov$set %in% c("tune"))
testrowinds <- which(pheno.cov$set %in% c("test"))
n <- length(trainrowinds)
if (file.exists("geno.bed")){
tmpfile <- tempfile()
snp_readBed("geno.bed",backingfile = tmpfile)
# Attach the "bigSNP" object in R session
obj.bigSNP <- snp_attach(paste0(tmpfile, ".rds"))
p <- nrow(obj.bigSNP$map)
G <- bigsnpr::snp_fastImputeSimple(obj.bigSNP$genotypes)[,1:p]
} else if (file.exists("snps.txt")){
G <- read.csv("snps.txt")
p <- ncol(G)
}
# Standardize genotype matrix
s <- apply(G, 2, sd)
G <- scale(G)
Gtrain <- G[trainrowinds,]
#Read GRM matrix
GRM <- as.matrix(fread("grm.txt.gz"))
colnames(GRM) <- pheno.cov$IID
rownames(GRM) <- pheno.cov$IID
#=======================================================================
# GGMIX
#=======================================================================
Xtrain <- pheno.cov[trainrowinds, c("AGE","SEX")]
ytrain <- as.matrix(pheno.cov$y)[trainrowinds]
Gtrain
#=======================================================================
# GGMIX
#=======================================================================
Xtrain <- pheno.cov[trainrowinds, c("AGE","SEX")]
ytrain <- as.matrix(pheno.cov$y)[trainrowinds]
fit_ggmix <- ggmix(x = as.matrix(cbind(Xtrain, Gtrain)),
y = ytrain,
standardize = TRUE,
kinship=GRM[trainrowinds, trainrowinds],
penalty.factor = c(rep(0,ncol(Xtrain)),rep(1,p))
)
fit_ggmix
GRM
eigsval <- eigen(GMR).values
eigsval <- eigen(GMR)$values
eigsval <- eigen(GRM)$values
eigsval
head(eigsval)
eigsval > 0
all(eigsval > 0)
View(GRM)
all(eigsval > 0)
!all(eigsval > 0)
if (!all(eigsval > 0)) 1
#Read GRM matrix
GRM <- Matrix::nearPD(as.matrix(fread("grm.txt.gz")))$mat
View(GRM)
A <- matrix(c(1, 0, 1, 0), nrow = 2)
A
eigen(A)
A <- matrix(c(1, 1, 0, 0), nrow = 2)
A
A <- matrix(c(1, 0, 1, 0), nrow = 2)
A
A <- matrix(c(1, 0, 0, 1), nrow = 2)
A
eigen(A)
Matrix::nearPD(A)
View(GRM)
colnames(GRM) <- pheno.cov$IID
rownames(GRM) <- pheno.cov$IID
#=======================================================================
# GGMIX
#=======================================================================
Xtrain <- pheno.cov[trainrowinds, c("AGE","SEX")]
ytrain <- as.matrix(pheno.cov$y)[trainrowinds]
fit_ggmix <- ggmix(x = as.matrix(cbind(Xtrain, Gtrain)),
y = ytrain,
standardize = TRUE,
kinship=GRM[trainrowinds, trainrowinds],
penalty.factor = c(rep(0,ncol(Xtrain)),rep(1,p))
)
GRM <- as.matrix(GRM)
Xtrain <- pheno.cov[trainrowinds, c("AGE","SEX")]
ytrain <- as.matrix(pheno.cov$y)[trainrowinds]
fit_ggmix <- ggmix(x = as.matrix(cbind(Xtrain, Gtrain)),
y = ytrain,
standardize = TRUE,
kinship=GRM[trainrowinds, trainrowinds],
penalty.factor = c(rep(0,ncol(Xtrain)),rep(1,p))
)
# Find lambda that gives minimum GIC
aic <- ggmix::gic(fit_ggmix, an = 2)
bic <- ggmix::gic(fit_ggmix, an = log(n))
# Save betas for ggmix with different GIC criteria
ggmixAIC_beta <- 1/s * coef(aic)[setdiff(rownames(coef(aic)), c("(Intercept)","AGE","SEX","eta","sigma2")),]
ggmixBIC_beta <- 1/s * coef(bic)[setdiff(rownames(coef(bic)), c("(Intercept)","AGE","SEX","eta","sigma2")),]
# Read file with real values
true_betas = read.csv("betas.txt")$beta
ggmix_betas = 1/s * fit_ggmix$beta[-(1:ncol(Xtrain)),]
# Predict phenotype on combined tune+test set
Xnew <- pheno.cov[-trainrowinds, c("AGE","SEX")]
Gnew <- G[-trainrowinds,]
ggmixAIC_yhat <- predict(aic, as.matrix(cbind(Xnew, Gnew)), covariance = GRM[-trainrowinds, trainrowinds])
ggmixBIC_yhat <- predict(bic, as.matrix(cbind(Xnew, Gnew)), covariance = GRM[-trainrowinds, trainrowinds])
#--------------------------------------------------------
# Find best model using tune set, and predict on test set
#--------------------------------------------------------
# Tune set
Xtune <- pheno.cov[tunerowinds, c("AGE","SEX")]
Gtune <- G[tunerowinds,]
ggmix_yhat <- predict(fit_ggmix, as.matrix(cbind(Xtune, Gtune)), covariance = GRM[tunerowinds, trainrowinds])
ggmix_yhat
library(roc)
library(rocR)
library(pROC)
data(aSAH)
aSAH
auc(roc(pheno.cov$y[tunerowinds], ggmix_yhat))
pheno.cov$y[tunerowinds]
auc(roc(pheno.cov$y[tunerowinds], ggmix_yhat[,1]))
dim(ggmix_yhat)
ncol(ggmix_yhat)
sapply(1:ncol(ggmix_yhat), function(i) auc(roc(pheno.cov$y[tunerowinds], ggmix_yhat[,i])))
which.max(sapply(1:ncol(ggmix_yhat), function(i) auc(roc(pheno.cov$y[tunerowinds], ggmix_yhat[,i]))))
ggmix_best_model <- which.max(sapply(1:ncol(ggmix_yhat), function(i) auc(roc(pheno.cov$y[tunerowinds], ggmix_yhat[,i]))))
ggmix_best_model
ggmix_tune_yhat <- predict(fit_ggmix, as.matrix(cbind(Xtune, Gtune)), covariance = GRM[tunerowinds, trainrowinds])
ggmix_best_model <- which.max(sapply(1:ncol(ggmix_tune_yhat), function(i) auc(roc(pheno.cov$y[tunerowinds], ggmix_tune_yhat[,i]))))
ggmix_best_model
ggmix_test_yhat <- predict(fit_ggmix, as.matrix(cbind(Xtest, Gtest)), covariance = GRM[tunerowinds, trainrowinds])
# Predict on test set
Xtest <- pheno.cov[testrowinds, c("AGE","SEX")]
Gtest <- G[testrowinds,]
ggmix_test_yhat <- predict(fit_ggmix, as.matrix(cbind(Xtest, Gtest)), covariance = GRM[tunerowinds, trainrowinds])
ggmix_test_yhat
ggmix_test_yhat <- predict(fit_ggmix, as.matrix(cbind(Xtest, Gtest)), covariance = GRM[tunerowinds, trainrowinds])[ggmix_best_model]
ggmix_test_yhat
ggmix_test_yhat <- predict(fit_ggmix, as.matrix(cbind(Xtest, Gtest)), covariance = GRM[tunerowinds, trainrowinds])
head(ggmix_test_yhat)
ggmix_test_yhat <- predict(fit_ggmix, as.matrix(cbind(Xtest, Gtest)), covariance = GRM[tunerowinds, trainrowinds])[,ggmix_best_model]
ggmix_test_yhat
ggmix_beta <- ggmix_betas[,ggmix_best_model]
ggmix_beta
# Read file with real values
true_betas = read.csv("betas.txt")$beta
ggmix_betas = 1/s * fit_ggmix$beta[-(1:ncol(Xtrain)),]
# Predict phenotype on combined tune+test set
Xnew <- pheno.cov[-trainrowinds, c("AGE","SEX")]
Gnew <- G[-trainrowinds,]
ggmixAIC_yhat <- predict(aic, as.matrix(cbind(Xnew, Gnew)), covariance = GRM[-trainrowinds, trainrowinds])
ggmixBIC_yhat <- predict(bic, as.matrix(cbind(Xnew, Gnew)), covariance = GRM[-trainrowinds, trainrowinds])
#--------------------------------------------------------
# Find best model using tune set, and predict on test set
#--------------------------------------------------------
# Select best model on tune set
Xtune <- pheno.cov[tunerowinds, c("AGE","SEX")]
Gtune <- G[tunerowinds,]
ggmix_tune_yhat <- predict(fit_ggmix, as.matrix(cbind(Xtune, Gtune)), covariance = GRM[tunerowinds, trainrowinds])
ggmix_best_model <- which.max(sapply(1:ncol(ggmix_tune_yhat), function(i) auc(roc(pheno.cov$y[tunerowinds], ggmix_tune_yhat[,i]))))
ggmix_beta <- ggmix_betas[,ggmix_best_model]
# Predict on test set
Xtest <- pheno.cov[testrowinds, c("AGE","SEX")]
Gtest <- G[testrowinds,]
ggmix_test_yhat <- predict(fit_ggmix, as.matrix(cbind(Xtest, Gtest)), covariance = GRM[tunerowinds, trainrowinds])[,ggmix_best_model]
getwd()
#Save results
write.csv(cbind(ggmix = ggmix_beta, ggmixAIC = ggmixAIC_beta, ggmixBIC = ggmixBIC_beta), "ggmix_results.txt", quote=FALSE, row.names = FALSE)
write.csv(cbind(ggmixAIC = ggmixAIC_yhat, ggmixBIC = ggmixBIC_yhat), "ggmix_fitted_values_tune_test.txt", quote=FALSE, row.names = FALSE)
write.csv(cbind(ggmix = ggmix_test_yhat), "ggmix_fitted_values_test.txt", quote=FALSE, row.names = FALSE)
write.csv(t(coef(aic, type = "nonzero")[c("eta", "sigma2"),]), "ggmix_tau.txt", quote=FALSE, row.names = FALSE)
#Save results
write.csv(cbind(ggmix = ggmix_beta, ggmixAIC = ggmixAIC_beta, ggmixBIC = ggmixBIC_beta), "ggmix_results.txt", quote=FALSE, row.names = FALSE)
ggmix_beta
str(ggmix_best_model)
str(ggmix_beta)
str(ggmixAIC_yhat)
ggmixAIC_yhat
predict(aic, as.matrix(cbind(Xnew, Gnew)), covariance = GRM[-trainrowinds, trainrowinds])
head(ggmixAIC_yhat)
ggmixAIC_yhat <- predict(aic, as.matrix(cbind(Xnew, Gnew)), covariance = GRM[-trainrowinds, trainrowinds]) %>% setNames("ggmixAIC")
head(ggmixAIC_yhat)
ggmixAIC_yhat <- predict(aic, as.matrix(cbind(Xnew, Gnew)), covariance = GRM[-trainrowinds, trainrowinds]) %>% setNames("ggmixAIC")
head(ggmixAIC_yhat)
ggmixAIC_yhat <- predict(aic, as.matrix(cbind(Xnew, Gnew)), covariance = GRM[-trainrowinds, trainrowinds])
head(ggmixAIC_yhat)
write.csv(cbind(ggmixAIC = ggmixAIC_yhat[,1], ggmixBIC = ggmixBIC_yhat[,1]), "ggmix_fitted_values_tune_test.txt", quote=FALSE, row.names = FALSE)
